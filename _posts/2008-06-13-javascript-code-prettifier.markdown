---
title: Javascript Code Prettifier
tags: tech
layout: post
---
I really liked the idea of the <a href="http://google-code-prettify.googlecode.com/svn/trunk/README.html">Javascript Code Prettifier</a>, and I really like my <a href="http://www.fuzzymonk.com/svn/settings/vim/vimfiles/colors/ristoink.vim">personal color scheme</a>, so I wanted to combine them.  I thought it was turned out pretty neat, espcially since it only took about 20 min of tinkering to get everything sorted out, so I wanted to contribute back to the author -- but he provides no simple way to do that, so I will tell you about it. You who are prolly only coming here for the pics of Leah (see previous post).<br /><br />Here is my color scheme for JS Prettifier:<br /><br /><pre class="sh_css"><br />/* Pretty printing styles. Used with prettify.js. */<br />/* Modifying to match RistoInk, with thanks to VibrantInk */<br />.str { color: #66FF00; }<br />.kwd { color: #AAAAAA; }<br />.com { color: #AA66FF; }<br />.typ { color: #DDE93D; }<br />.lit { color: #339999; }<br />.pun { color: #AAAAAA; }<br />.pln { color: #FFFFFF; }<br />.tag { color: #AAFFFF; }<br />.atn { color: #FF6600; }<br />.atv { color: #66FF00; }<br />.dec { color: #FF6600; }<br />pre.prettyprint { padding: 2px; border: 1px solid #888; background-color: #000000;}<br /></pre><br /><br /><br />The only other change is, I wanted the tags surrounding the code to be &lt;pre class="code"&gt; instead of &lt;pre class="prettyprint"&gt;, because I just type raw html and that would be shorter and easier to remember (at least for me).<br /><br />You can see those files directly: <br /><ul><br /><li><a href="http://www.fuzzymonk.com/styles/prettify.css">prettify.css</a></li><br /><li><a href="http://www.fuzzymonk.com/js/prettify.js">prettify.js</a></li><br /></ul><br /><br />Check out some fun ruby code (and it's whitespace independence):<br /><pre class="code"><br />hash = { :water => 'wet', :fire => 'hot' }<br />puts hash[:fire] # Prints:  hot<br /><br />hash.each_pair do |key, value| # Or:  hash.each do |key, value|<br />       puts "#{key} is #{value}"<br />end<br /><br /># Prints:  water is wet<br />#          fire is hot<br /><br />hash.delete :water # Deletes :water => 'wet'<br />hash.delete_if {|k,value| value=='hot'} # Deletes :fire => 'hot'<br /></pre>
